// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TopBar settings
model TopBarSettings {
  id           Int      @id @default(autoincrement())
  email        String
  emailLabel   String   @default("E-PASTS:")
  location     String
  locationLabel String  @default("NĀKAMĀ PIETURA:")
  facebook     String?
  instagram    String?
  youtube      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("topbar_settings")
}

// Navbar settings
model NavbarSettings {
  id          Int      @id @default(autoincrement())
  logoText    String   @default("SDK")
  logoSubtext String   @default("THUNDER")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("navbar_settings")
}

// Navbar menu items
model NavbarMenuItem {
  id        Int     @id @default(autoincrement())
  name      String
  href      String
  order     Int     @default(0)
  active    Boolean @default(false)
  visible   Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("navbar_menu_items")
}

// News articles
model News {
  id          Int      @id @default(autoincrement())
  title       String
  summary     String
  content     String
  image       String?
  category    String
  author      String
  featured    Boolean  @default(false)
  published   Boolean  @default(true)
  views       Int      @default(0)
  likes       Int      @default(0)
  readTime    Int      @default(3)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime @default(now())

  comments NewsComment[]
  tags     NewsTag[]

  @@map("news")
}

// News comments
model NewsComment {
  id        Int      @id @default(autoincrement())
  newsId    Int
  author    String
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())

  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@map("news_comments")
}

// News tags
model NewsTag {
  id     Int    @id @default(autoincrement())
  newsId Int
  tag    String

  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@map("news_tags")
}

// Calendar events
model CalendarEvent {
  id               Int      @id @default(autoincrement())
  title            String
  description      String?
  date             DateTime
  time             String
  location         String
  type             EventType
  opponent         String?
  status           EventStatus @default(UPCOMING)
  result           String?
  ticketsAvailable Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@map("calendar_events")
}

enum EventType {
  GAME
  TRAINING
  EVENT
}

enum EventStatus {
  UPCOMING
  COMPLETED
  LIVE
}

// Gallery items
model GalleryItem {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  filename    String
  type        MediaType
  category    String
  views       Int         @default(0)
  likes       Int         @default(0)
  downloads   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("gallery_items")
}

enum MediaType {
  PHOTO
  VIDEO
}

// Partners
model Partner {
  id          Int         @id @default(autoincrement())
  name        String
  type        String
  description String?
  logo        String?
  tier        PartnerTier @default(BRONZE)
  website     String?
  active      Boolean     @default(true)
  order       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("partners")
}

enum PartnerTier {
  GOLD
  SILVER
  BRONZE
}

// Contact form submissions
model ContactSubmission {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("contact_submissions")
}

// About page content
model AboutContent {
  id          Int      @id @default(autoincrement())
  section     String   @unique
  title       String?
  content     String
  image       String?
  order       Int      @default(0)
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("about_content")
}